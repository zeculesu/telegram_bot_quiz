import telebot
from telebot import types
import json
import emoji
import random
from datetime import datetime
from api_key import api_key

bot = telebot.TeleBot(api_key)
file_info_questions = json.load(open('info_questions.json', encoding='utf-8'))
file_info_user = json.load(open('info_users.json', encoding='utf-8'))
questions = file_info_questions['questions']


def update_json(id_user):
    file_info_user["id"][id_user] = {}
    file_info_user["id"][id_user]["number_quiz"] = 0
    file_info_user["id"][id_user]["answer_exict"] = False
    file_info_user["id"][id_user]["start_chat"] = False
    file_info_user["id"][id_user]["count"] = []
    with open('info_users.json', 'w') as file:
        json.dump(file_info_user, file)


def save_changes(file_info_user):
    with open('info_users.json', 'w') as file:
        json.dump(file_info_user, file)


def generate_keyboard(*answer):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for item in answer:
        button = types.KeyboardButton(item)
        keyboard.add(button)
    return keyboard


def make_key(question, num):
    keyboard = types.InlineKeyboardMarkup()
    question = random.sample(question, len(question))
    for i in range(len(question)):
        key = types.InlineKeyboardButton(text=question[i], callback_data=f"{question[i].split()[0]};{num}")
        keyboard.add(key)
    return keyboard


def quiz(message, id_user):
    bot.send_message(id_user, "–ù–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ")
    transition = ['–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:', '–¢–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:', '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:', '–õ–æ–≤–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:']
    count = file_info_user["id"][id_user]["count"]
    for i in range(len(questions)):
        if i != 0:
            bot.send_message(id_user, random.choice(transition))
        file_info_user["id"][id_user]["number_quiz"] = i
        keyboard = make_key(questions[list(questions.keys())[i]], i)
        bot.send_message(id_user, list(questions.keys())[i], reply_markup=keyboard)
        while not file_info_user["id"][id_user]["answer_exict"]:
            continue
        file_info_user["id"][id_user]["answer_exict"] = False
        save_changes(file_info_user)
    while len(count) != len(questions):
        continue
    if len(count) == len(questions):
        bot.send_message(id_user, f"–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –º–æ–ª–æ–¥–µ—Ü! {emoji.emojize(':brain: ')}\n"
                                  f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é –∏–≥—Ä—É")
        bot.send_message(id_user, f'–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {sum(count)}/{len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        print(datetime.today().strftime('%d-%m-%Y %H:%M'))
        print(message.from_user.first_name, message.from_user.first_name)
        print(f'{sum(count)}/{len(questions)}')
        print('---------')
        update_json(id_user)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    transition = ['–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë', '–ù–µ–≤–µ—Ä–Ω–æ, —É–≤—ã', '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–ü–æ–¥—É–º–∞–π –µ—â—ë', '–ù–µ—Ç, –Ω–µ —Ç–∞–∫']
    id_user = call.message.chat.id
    number_quiz = file_info_user["id"][id_user]["number_quiz"]
    count = file_info_user["id"][id_user]["count"]
    if int(call.data.split(';')[1]) == number_quiz:
        correct_answer = file_info_questions["answer"][str(number_quiz)][1]
        if call.data.split(';')[0] in correct_answer:
            answer_to_user = file_info_questions["answer"][str(number_quiz)][0]
            bot.send_message(call.message.chat.id, answer_to_user)
            file_info_user["id"][id_user]["answer_exict"] = True
            if len(count) != number_quiz + 1:
                count.append(1)
            number_quiz += 1
        else:
            if len(count) != number_quiz + 1:
                count.append(0)
            bot.send_message(call.message.chat.id, random.choice(transition))
    save_changes(file_info_user)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    id_user = message.from_user.id
    if id_user in file_info_user['id']:
        if file_info_user["id"][id_user]["start_chat"]:
            bot.send_message(id_user, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—à–ª—ã–π –∫–≤–∏–∑")
            return
        elif message.text == "/start":
            bot.send_message(id_user, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n\n"
                                      f"–≠—Ç–æ –∫–≤–∏–∑ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–∞–º –∏–∑ —Å—Ñ–µ—Ä—ã IT üí°üí°üí° \n"
                                      f"–í—Å—ë —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è - —Å–º–∞—Ä—Ç—Ñ–æ–Ω üì±")
            keyboard = generate_keyboard('–î–∞', '–ù–µ—Ç')
            bot.send_message(id_user, "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?", reply_markup=keyboard)
            update_json(id_user)
        elif message.text == '–î–∞':
            bot.send_message(id_user, "–û—Ç–ª–∏—á–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
            file_info_user["id"][id_user]["start_chat"] = True
            with open('info_users.json', 'w') as f:
                json.dump(file_info_user, f)
            quiz(message, id_user)
        elif message.text == '–ù–µ—Ç':
            bot.send_photo(id_user, open('img/sad.jpg', 'rb'))
        elif message.text == "/help":
            bot.send_message(id_user, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –Ω–∞–ø–∏—à–∏: /start")
        else:
            bot.send_message(id_user, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")
    else:
        if message.text == "/start":
            bot.send_message(id_user, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n\n"
                                      f"–≠—Ç–æ –∫–≤–∏–∑ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–∞–º –∏–∑ —Å—Ñ–µ—Ä—ã IT üí°üí°üí° \n"
                                      f"–í—Å—ë —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è - —Å–º–∞—Ä—Ç—Ñ–æ–Ω üì±")
            keyboard = generate_keyboard('–î–∞', '–ù–µ—Ç')
            bot.send_message(id_user, "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?", reply_markup=keyboard)
            update_json(id_user)


bot.polling(none_stop=True, interval=0)
